AWSTemplateFormatVersion: "2010-09-09"
Description: Misskey VPC definition
Parameters:
  VpcCidr:
    Type: String
    Description: VPC CIDR address
    AllowedPattern: '^(10\.([1-9]?[0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|172\.(1[6-9]|2[0-9]|3[01])|192\.168)\.0\.0/16$'
    ConstraintDescription: VPC CIDR must be private /16 block
    Default: 10.1.0.0/16
  CreateNATGateway:
    Type: String
    Description: Whether to create NAT gateway or not
    AllowedValues:
      - "EachAZ"
      - "OneAZ"
      - "None"
    Default: "None"
Conditions:
  HasNATGateway: !Not
    - !Equals
      - !Ref CreateNATGateway
      - "None"
  HasEacnAZNatGateway: !Equals
    - !Ref CreateNATGateway
    - "EachAZ"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC base settings
        Parameters:
          - VpcCidr
      - Label:
          default: Gateway settings
        Parameters:
          - CreateNATGateway
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Vpc"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
  VpcIpv6Cidr:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref Vpc
      AmazonProvidedIpv6CidrBlock: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-InternetGateway"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  EgressOnlyGateway:
    Type: AWS::EC2::EgressOnlyInternetGateway
    DependsOn: VpcIpv6Cidr
    Properties:
      VpcId: !Ref Vpc
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VpcIpv6Cidr
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
        - 0
        - !Cidr
          - !GetAtt Vpc.CidrBlock
          - 6
          - 13
      Ipv6CidrBlock: !Select
        - 0
        - !Cidr
          - !Select
            - 0
            - !GetAtt Vpc.Ipv6CidrBlocks
          - 6
          - 64
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet1"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
        - Key: SubnetType
          Value: Public
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VpcIpv6Cidr
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
        - 1
        - !Cidr
          - !GetAtt Vpc.CidrBlock
          - 6
          - 13
      Ipv6CidrBlock: !Select
        - 1
        - !Cidr
          - !Select
            - 0
            - !GetAtt Vpc.Ipv6CidrBlocks
          - 6
          - 64
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet1"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
        - Key: SubnetType
          Value: Private
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VpcIpv6Cidr
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
        - 2
        - !Cidr
          - !GetAtt Vpc.CidrBlock
          - 6
          - 13
      Ipv6CidrBlock: !Select
        - 2
        - !Cidr
          - !Select
            - 0
            - !GetAtt Vpc.Ipv6CidrBlocks
          - 6
          - 64
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet2"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
        - Key: SubnetType
          Value: Public
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VpcIpv6Cidr
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
        - 3
        - !Cidr
          - !GetAtt Vpc.CidrBlock
          - 6
          - 13
      Ipv6CidrBlock: !Select
        - 3
        - !Cidr
          - !Select
            - 0
            - !GetAtt Vpc.Ipv6CidrBlocks
          - 6
          - 64
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet2"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
        - Key: SubnetType
          Value: Private
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VpcIpv6Cidr
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
        - 4
        - !Cidr
          - !GetAtt Vpc.CidrBlock
          - 6
          - 13
      Ipv6CidrBlock: !Select
        - 4
        - !Cidr
          - !Select
            - 0
            - !GetAtt Vpc.Ipv6CidrBlocks
          - 6
          - 64
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet3"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
        - Key: SubnetType
          Value: Public
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VpcIpv6Cidr
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
        - 5
        - !Cidr
          - !GetAtt Vpc.CidrBlock
          - 6
          - 13
      Ipv6CidrBlock: !Select
        - 5
        - !Cidr
          - !Select
            - 0
            - !GetAtt Vpc.Ipv6CidrBlocks
          - 6
          - 64
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet3"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
        - Key: SubnetType
          Value: Private
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicRouteTable"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
        - Key: SubnetType
          Value: Public
  PublicRouteIpv4:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRouteIpv6:
    Type: AWS::EC2::Route
    DependsOn: VpcIpv6Cidr
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationIpv6CidrBlock: '::/0'
      GatewayId: !Ref InternetGateway
  PublicSutnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicSubnet3RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet1RouteTable"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
        - Key: SubnetType
          Value: Private
  PrivateSubnet1RouteIpv6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationIpv6CidrBlock: '::/0'
      EgressOnlyInternetGatewayId: !Ref EgressOnlyGateway
  PrivateSubnet1NatEIP:
    Type: AWS::EC2::EIP
    Condition: HasNATGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet1NatEIP"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
  PrivateSubnet1NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HasNATGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt PrivateSubnet1NatEIP.AllocationId
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet1NatGateway"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
  PrivateSubnet1RouteIpv4:
    Type: AWS::EC2::Route
    Condition: HasNATGateway
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PrivateSubnet1NatGateway
  PrivateSubnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet2RouteTable"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
        - Key: SubnetType
          Value: Private
  PrivateSubnet2RouteIpv6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationIpv6CidrBlock: '::/0'
      EgressOnlyInternetGatewayId: !Ref EgressOnlyGateway
  PrivateSubnet2NatEIP:
    Type: AWS::EC2::EIP
    Condition: HasEacnAZNatGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet2NatEIP"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
  PrivateSubnet2NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HasEacnAZNatGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      AllocationId: !GetAtt PrivateSubnet2NatEIP.AllocationId
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet2NatGateway"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
  PrivateSubnet2RouteIpv4:
    Type: AWS::EC2::Route
    Condition: HasNATGateway
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If
        - HasEacnAZNatGateway
        - !Ref PrivateSubnet2NatGateway
        - !Ref PrivateSubnet1NatGateway
  PrivateSubnet2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnet3RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet3RouteTable"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
        - Key: SubnetType
          Value: Private
  PrivateSubnet3RouteIpv6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet3RouteTable
      DestinationIpv6CidrBlock: '::/0'
      EgressOnlyInternetGatewayId: !Ref EgressOnlyGateway
  PrivateSubnet3NatEIP:
    Type: AWS::EC2::EIP
    Condition: HasEacnAZNatGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet3NatEIP"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
  PrivateSubnet3NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HasEacnAZNatGateway
    Properties:
      SubnetId: !Ref PublicSubnet3
      AllocationId: !GetAtt PrivateSubnet3NatEIP.AllocationId
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet3NatGateway"
        - Key: CostTag
          Value: !Ref AWS::StackName
        - Key: AppManagerCFNStackKey
          Value: !Ref AWS::StackName
  PrivateSubnet3RouteIpv4:
    Type: AWS::EC2::Route
    Condition: HasNATGateway
    Properties:
      RouteTableId: !Ref PrivateSubnet3RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If
        - HasEacnAZNatGateway
        - !Ref PrivateSubnet3NatGateway
        - !Ref PrivateSubnet1NatGateway
  PrivateSubnet3RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet3RouteTable
      SubnetId: !Ref PrivateSubnet3
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: !Ref Vpc
      RouteTableIds:
        - !Ref PrivateSubnet1RouteTable
        - !Ref PrivateSubnet2RouteTable
        - !Ref PrivateSubnet3RouteTable
      VpcEndpointType: Gateway
  DynaoDbEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcId: !Ref Vpc
      RouteTableIds:
        - !Ref PrivateSubnet1RouteTable
        - !Ref PrivateSubnet2RouteTable
        - !Ref PrivateSubnet3RouteTable
      VpcEndpointType: Gateway
  # stub